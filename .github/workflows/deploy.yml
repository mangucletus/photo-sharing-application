name: Deploy Photo Sharing App

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Create Lambda packages
      run: |
        # Image resizer Lambda
        mkdir -p lambda_package
        pip install Pillow boto3 -t lambda_package/
        cp lambda/lambda_function.py lambda_package/
        cd lambda_package && zip -r ../image_resizer.zip .
        cd ..
        
        # API Lambda (create if doesn't exist)
        mkdir -p api_lambda_package
        if [ -f "api_lambda/lambda_function.py" ]; then
          pip install boto3 -t api_lambda_package/
          cp api_lambda/lambda_function.py api_lambda_package/
        else
          # Create enhanced API Lambda if file doesn't exist
          cat > api_lambda_package/lambda_function.py << 'APIEOF'
        import json
        import boto3
        from boto3.dynamodb.conditions import Key
        import os
        from decimal import Decimal

        dynamodb = boto3.resource('dynamodb')

        def decimal_default(obj):
            """JSON serializer for DynamoDB Decimal types"""
            if isinstance(obj, Decimal):
                return float(obj)
            raise TypeError

        def lambda_handler(event, context):
            print(f"Received event: {json.dumps(event)}")
            
            try:
                # Enable CORS
                headers = {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                    'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
                }
                
                # Handle preflight requests
                if event['httpMethod'] == 'OPTIONS':
                    return {
                        'statusCode': 200,
                        'headers': headers,
                        'body': ''
                    }
                
                # Get table name from environment
                table_name = os.environ.get('METADATA_TABLE')
                if not table_name:
                    return {
                        'statusCode': 500,
                        'headers': headers,
                        'body': json.dumps({'error': 'METADATA_TABLE environment variable not set'})
                    }
                    
                table = dynamodb.Table(table_name)
                
                # Extract user_id from path parameters
                path_params = event.get('pathParameters') or {}
                user_id = path_params.get('user_id')
                
                if not user_id:
                    return {
                        'statusCode': 400,
                        'headers': headers,
                        'body': json.dumps({
                            'error': 'user_id is required',
                            'message': 'Please provide user_id in path parameters'
                        })
                    }
                
                # Handle GET requests to fetch user images
                if event['httpMethod'] == 'GET':
                    try:
                        # Try scanning for the user's images
                        response = table.scan(
                            FilterExpression='user_id = :user_id AND attribute_exists(thumbnail_key) AND #status = :status',
                            ExpressionAttributeNames={'#status': 'status'},
                            ExpressionAttributeValues={
                                ':user_id': user_id,
                                ':status': 'processed'
                            }
                        )
                        
                        images = response['Items']
                        processed_images = []
                        thumbnail_bucket = os.environ.get('THUMBNAIL_BUCKET', '')
                        region = os.environ.get('AWS_DEFAULT_REGION', 'eu-west-1')
                        
                        for image in images:
                            thumbnail_url = f"https://{thumbnail_bucket}.s3.{region}.amazonaws.com/{image['thumbnail_key']}"
                            
                            processed_image = {
                                'id': image['image_id'],
                                'originalKey': image['original_key'],
                                'thumbnailKey': image['thumbnail_key'],
                                'thumbnailUrl': thumbnail_url,
                                'originalName': image.get('original_name', image['original_key']),
                                'uploadTime': image['upload_time'],
                                'processedTime': image.get('processed_time'),
                                'size': image.get('original_size', 0),
                                'originalWidth': image.get('original_width'),
                                'originalHeight': image.get('original_height'),
                                'thumbnailWidth': image.get('thumbnail_width'),
                                'thumbnailHeight': image.get('thumbnail_height'),
                                'contentType': image.get('content_type', 'image/jpeg')
                            }
                            processed_images.append(processed_image)
                        
                        # Sort by upload time (newest first)
                        processed_images.sort(key=lambda x: x['uploadTime'], reverse=True)
                        
                        return {
                            'statusCode': 200,
                            'headers': headers,
                            'body': json.dumps({
                                'images': processed_images,
                                'count': len(processed_images),
                                'user_id': user_id
                            }, default=decimal_default)
                        }
                        
                    except Exception as e:
                        print(f"Error fetching images: {str(e)}")
                        return {
                            'statusCode': 500,
                            'headers': headers,
                            'body': json.dumps({
                                'error': 'Failed to fetch images',
                                'message': str(e)
                            })
                        }
                else:
                    return {
                        'statusCode': 405,
                        'headers': headers,
                        'body': json.dumps({'error': 'Method not allowed'})
                    }
                    
            except Exception as e:
                print(f"Error: {str(e)}")
                return {
                    'statusCode': 500,
                    'headers': {
                        'Access-Control-Allow-Origin': '*',
                        'Access-Control-Allow-Headers': 'Content-Type',
                        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
                    },
                    'body': json.dumps({
                        'error': 'Internal server error',
                        'message': str(e)
                    })
                }
        APIEOF
        fi
        cd api_lambda_package && zip -r ../api_lambda.zip .
        cd ..

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform

    - name: Get Terraform Outputs
      id: terraform
      run: |
        echo "images_bucket=$(terraform output -raw images_bucket_name)" >> $GITHUB_OUTPUT
        echo "frontend_bucket=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
        echo "thumbnails_bucket=$(terraform output -raw thumbnails_bucket_name)" >> $GITHUB_OUTPUT
        echo "user_pool_id=$(terraform output -raw cognito_user_pool_id)" >> $GITHUB_OUTPUT
        echo "user_pool_client_id=$(terraform output -raw cognito_client_id)" >> $GITHUB_OUTPUT
        echo "identity_pool_id=$(terraform output -raw cognito_identity_pool_id)" >> $GITHUB_OUTPUT
        echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        echo "lambda_function_name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT
        echo "api_lambda_function_name=$(terraform output -raw api_lambda_function_name)" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Install Frontend Dependencies
      run: |
        rm -rf node_modules package-lock.json
        npm install
      working-directory: ./frontend

    - name: Build React App
      run: npm run build
      working-directory: ./frontend
      env:
        REACT_APP_AWS_REGION: ${{ env.AWS_REGION }}
        REACT_APP_USER_POOL_ID: ${{ steps.terraform.outputs.user_pool_id }}
        REACT_APP_USER_POOL_CLIENT_ID: ${{ steps.terraform.outputs.user_pool_client_id }}
        REACT_APP_IDENTITY_POOL_ID: ${{ steps.terraform.outputs.identity_pool_id }}
        REACT_APP_IMAGES_BUCKET: ${{ steps.terraform.outputs.images_bucket }}
        REACT_APP_THUMBNAILS_BUCKET: ${{ steps.terraform.outputs.thumbnails_bucket }}
        REACT_APP_API_GATEWAY_URL: ${{ steps.terraform.outputs.api_gateway_url }}
        CI: false

    - name: Deploy Frontend to S3
      run: |
        aws s3 sync frontend/build/ s3://${{ steps.terraform.outputs.frontend_bucket }}/ --delete
        aws s3 cp frontend/build/index.html s3://${{ steps.terraform.outputs.frontend_bucket }}/index.html --cache-control="no-cache"

    - name: Update Lambda Functions
      run: |
        # Update image resizer
        echo "Updating image resizer Lambda..."
        aws lambda update-function-code \
          --function-name ${{ steps.terraform.outputs.lambda_function_name }} \
          --zip-file fileb://image_resizer.zip \
          --region ${{ env.AWS_REGION }}
        
        # Wait for update to complete
        aws lambda wait function-updated \
          --function-name ${{ steps.terraform.outputs.lambda_function_name }} \
          --region ${{ env.AWS_REGION }}
        
        echo "✅ Image resizer Lambda updated successfully"
        
        # Update API Lambda
        echo "Updating API Lambda..."
        if aws lambda get-function --function-name ${{ steps.terraform.outputs.api_lambda_function_name }} --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          aws lambda update-function-code \
            --function-name ${{ steps.terraform.outputs.api_lambda_function_name }} \
            --zip-file fileb://api_lambda.zip \
            --region ${{ env.AWS_REGION }}
          
          # Wait for update to complete
          aws lambda wait function-updated \
            --function-name ${{ steps.terraform.outputs.api_lambda_function_name }} \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ API Lambda updated successfully"
        else
          echo "⚠️ API Lambda function not found - it will be created by Terraform"
        fi

    - name: Test API Endpoint
      run: |
        API_URL="${{ steps.terraform.outputs.api_gateway_url }}"
        echo "Testing API endpoint: $API_URL"
        
        # Test the API endpoint
        curl -X GET "$API_URL/api/user/test-user/images" \
          -H "Content-Type: application/json" \
          -w "HTTP Status: %{http_code}\n" \
          --max-time 30 || echo "API test failed - this is expected if no test data exists"

    - name: Output URLs
      run: |
        echo "🚀 Deployment Complete!"
        echo "Website: http://${{ steps.terraform.outputs.frontend_bucket }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        echo "API: ${{ steps.terraform.outputs.api_gateway_url }}"
        echo ""
        echo "📋 Environment Variables for Local Development:"
        echo "REACT_APP_AWS_REGION=${{ env.AWS_REGION }}"
        echo "REACT_APP_USER_POOL_ID=${{ steps.terraform.outputs.user_pool_id }}"
        echo "REACT_APP_USER_POOL_CLIENT_ID=${{ steps.terraform.outputs.user_pool_client_id }}"
        echo "REACT_APP_IDENTITY_POOL_ID=${{ steps.terraform.outputs.identity_pool_id }}"
        echo "REACT_APP_IMAGES_BUCKET=${{ steps.terraform.outputs.images_bucket }}"
        echo "REACT_APP_THUMBNAILS_BUCKET=${{ steps.terraform.outputs.thumbnails_bucket }}"
        echo "REACT_APP_API_GATEWAY_URL=${{ steps.terraform.outputs.api_gateway_url }}"